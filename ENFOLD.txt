ES Python dependencies
----------------------

Current version of this package requires elasticsearch_dsl. It is
necessary to add the 'elasticsearch-dsl' egg to the buildout eggs.
Alternatively, it can be added to the eggs in the celery part. 
Run the buildout again to get that dependency on existing installations.

ES configuration on zope.conf
-----------------------------

The elasticsearch directive now supports the following keys:

- max_blobsize. Max length of files to index, in bytes. If a file is
  larger than this size, it will not be indexed, and this will be logged.
  Default is zero, which means index everything.

- request_timeout. The default connection timeout is 10 seconds. Using this
  key it can be set to any number of seconds.

- use_celery. If true, indexing will be done in async celery tasks. This
  requires that celery is correctly configured.

- indexed_chars. Maximum number of characters to extract from attachments.
  Default is 100,000. Use -1 for infinite.

Example:

zope-conf-additional =
    %import collective.es.index
    <elasticsearch>
    query 127.0.0.1:92000
    ingest 127.0.0.1:92000
    request_timeout 20
    max_blobsize 10000000 # 10 MB
    indexed_chars 200000
    use_celery true
    </elasticsearch>

It is necessary to add this configuration to the buildout and rerun it
whenever a change is made to these parameters.

Celery configuration
--------------------

NOTE: The configuration now uses collective.celery, so it has changed.

The collective.celery package requires adding the celery and
collective.celery eggs to the mian buildout section eggs. Example:

eggs = 
    celery
    Plone
    elasticsearch
    elasticsearch-dsl
    collective.es.index
    collective.celery

We still use the celery-broker part, for clarity. The celery part is
still required, but is simpler:

[celery-broker]
host = 127.0.0.1
port = 6379

[celery]
recipe = zc.recipe.egg
environment-vars = ${buildout:environment-vars}
eggs = 
    ${buildout:eggs}
    flower
scripts = pcelery flower

The celery part depends on having some variables added to the main
environment-vars section:

environment-vars =
    CELERY_BROKER_URL redis://${celery-broker:host}:${celery-broker:port}
    CELERY_RESULT_BACKEND redis://${celery-broker:host}:${celery-broker:port}
    CELERY_TASKS collective.es.index.tasks

Additional Zope configuration
-----------------------------

There's now a hook in collective.celery for carrying out additional zope
configuration before running the tasks. If the tasks module contains an
'extra_config' method, it is passed the zope startup object at worker
initialization time. This is used by collective.es.index to run the
elasticsearch configuration method.

Monitoring celery tasks
-----------------------

Celery needs to be started as an independent process. It's recommended to
use supervisord for this. To try it out from the command line, you can run
"bin/pcelery worker" from the buildout directory. Note that the script is
now named 'pcelery' and it needs a path to the zope configuration. Example:

$ bin/pcelery worker parts/client1/etc/zope.conf

Flower is included in this setup. Run "bin/flower" from the buildout
directory and consult the dashboard at http://localhost:5555 using a
browser. Note that the broker is now a requried parameter:

$ bin/flower --broker redis://127.0.0.1:6379

Removing b64 attribute
----------------------

To get the b64 attribute removal working on an existing elasticsearch
install, it's necessary to clear the old ingest pipeline, so that 
collective.es.index can install the new one. To do this, you can use a
python prompt, like this:

>>> from elasticsearch import Elasticsearch
>>> es = Elasticsearch()
>>> es.ingest.delete_pipeline('attachment_ingest_plone_plone') 

Highlight support
-----------------

For every search result, a list of highlights from extracted text is
saved as a dictionary in the current request annotations. The
dictionary is keyed by object UID.

To get the annotations from Python code:

from collective.es.index.esproxyindex import HIGHLIGHT_KEY
from zope.annotation.interfaces import IAnnotations
annotations = IAnnotations(REQUEST)
highlights = annotations[HIGHLIGHT_KEY]
obj_highlights = highlights[OBJ_UID]
highlight_text = '<br/>'.join(obj_highlights)

Highlights are just lists of HTML text fragments with the query term
enclosed in <em> tags.

Collective.fingerpointing
-------------------------

To use the new extras functionality for collective.fingerpointing,
simply add an extras.py module somewhere in your code, with a handler
for each type of subscriber (lifecycle, workflow, pas, registry,
generic_setup, iterate). All handlers receive the same parameters. The
handler must return a dictionary with string keys and values. Example:

def lifecycle(event, action, extra_info):
    obj = event.object
    return {'path': obj.absolute_url_path(),
            'type': obj.portal_type,
            'uid': obj.UID()}

To configure the extras handlers, add their module name to the
collective-fingerpointing configuration:

zope-conf-additional +=
    <product-config collective.fingerpointing>
        audit-log ${buildout:directory}/var/log/audit.log
        audit-log-max-size 10240
        audit-log-old-files 30
        audit-log-extras-handlers my.package.extras
    </product-config>
